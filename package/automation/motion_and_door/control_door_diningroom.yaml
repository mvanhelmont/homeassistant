###########################################################################################
# CONTROL DININGROOM LIGHTS BASED ON DINIGROOM SENSOR
###########################################################################################

- alias: "Door Sensor - Diningroom door open Diningroom light off"
  trigger:

    platform: state
    entity_id: binary_sensor.neo_diningroomdoor_custom_sensor # Sensor Diningroom Door

  condition:
    - condition: state
      entity_id: switch.mqtt_scene_daytime
      state: "off"

    - condition: state
      entity_id: switch.mqtt_scene_goodnight
      state: "off"

  action:
    - service: light.turn_on
      data_template:
        entity_id: light.dressoir_all
        brightness_pct: >-
          {% if states('binary_sensor.neo_diningroomdoor_custom_sensor') == 'on' and (states('sensor.season') == 'autumn' or states('sensor.season') == 'winter') %} 100
          {% elif states('binary_sensor.neo_diningroomdoor_custom_sensor') == 'on' and (states('sensor.season') == 'spring' or states('sensor.season') == 'summer') %} 20
          {% else %} 100
          {% endif %}

    - service: homeassistant.turn_on
      data_template:
        entity_id: light.newkaku_01401eb6_a
        brightness_pct: >-
          {% if states('binary_sensor.neo_diningroomdoor_custom_sensor') == 'on' and states('switch.mqtt_kay_learning') == 'off' and (states('sensor.season') == 'spring' or states('sensor.season') == 'summer') %} 0
          {% elif states('binary_sensor.neo_diningroomdoor_custom_sensor') == 'off' and states('switch.mqtt_kay_learning') == 'off' and (states('sensor.season') == 'spring' or states('sensor.season') == 'summer') %} 50
          {% elif states('binary_sensor.neo_diningroomdoor_custom_sensor') == 'on' and states('switch.mqtt_kay_learning') == 'on' %} 100
          {% elif states('binary_sensor.neo_diningroomdoor_custom_sensor') == 'off' and states('switch.mqtt_kay_learning') == 'on' %} 100
          {% else %} 50
          {% endif %}
